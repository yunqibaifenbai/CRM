package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Mapper;

import java.security.acl.Acl;
import java.util.List;
import java.util.Map;

@Mapper
public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    int insertActivity(Activity activity);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    int updateByPrimaryKeySelective(Activity activity);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Aug 27 13:18:22 CST 2023
     */
    int updateByPrimaryKey(Activity record);

    /*
    * 根据条件分页查询市场活动的列表
    * */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);

    /*
    * 根据条件查询市场活动的总条数
    * */
    int selectCountActivityByCondition(Map<String,Object> map);

    /*
    * 根据id批量删除市场活动
    * */
    int deleteActivityByIds(String[] ids);

    /*
    * 根据id查询市场活动
    * */
    List<Activity> selectAllActivitys();

    /*
    * 批量保存市场活动
    * */
    int insertActivityByList(List<Activity> activityList);

    /*
    * 根据id查询市场活动明细信息
    * */
    Activity selectActivityForDetailById(String id);

    /*
    * 根据ClueId查询该线索相关联的市场活动的相关信息
    * */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    List<Activity> selectActivityForDeatilByNameClueId(Map<String,Object> map);

    List<Activity> selectActivityForConverByNameClueId(Map<String,Object> map);

    List<Activity> selectActivityForDetailByIds(String[] activityId);
}